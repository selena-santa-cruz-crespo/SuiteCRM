import * as hooks from '../../support/hooks'
import { CalendarElements } from '../../support/pages_objects/calendar_elements'
const calendar_elements = new CalendarElements()

describe('Calendar Tests', () => {
    hooks.setup_before_each()

it('TC 301 - Verificar que al dejar los campos obligatorios vacíos el usuario no puede agendar su reunión', { tags: ['smoketest'] }, () => {
    cy.task('log', 'Ingresando al formulario para agendar una nueva reunion')
    calendar_elements.schedule_meeting_page()
    .click({force: true})
    cy.wait(2000)
    cy.url().should('include', '/#/meetings/edit?return_module=Meetings&return_action=DetailView')
    calendar_elements.setIframe().then(()=>{
        calendar_elements.task_data().then((data)=>{
        calendar_elements.first_title1().should('have.text', 'Meetings')
        calendar_elements.second_title().should('contain.text', 'CREATE')
        cy.task('log', 'Se ha ingresado al formulario. Ingreso de datos de la reunion')
        calendar_elements.start_date1().clear({force: true})
        calendar_elements.end_date().clear({force: true})
        calendar_elements.location_field().type(data.location, {force: true})
        calendar_elements.select_duration().click({force: true})
        calendar_elements.description_field1().type(data.description, {force: true})
        calendar_elements.save_button1().click({force: true})
        cy.task('log', 'Verificando mensajes de los campos vacios')
        calendar_elements.subject_error_message1()
        .should('contain.text', 'Missing required field: Subject')
        calendar_elements.start_date_error_message()
        .should('contain.text', 'Missing required field: Start Date')
        calendar_elements.end_date_error_message()
        .should('contain.text', 'Missing required field: End Date')
    })   
    })  
})

it('TC 302 - Verificar que al dejar los campos obligatorios vacíos el usuario no puede agendar una llamada', { tags: ['smoketest'] }, () => {
    cy.task('log', 'Ingresando al formulario para agendar una llamada')
    calendar_elements.schedule_call_page()
    .click({force: true})
    cy.wait(2000)
    cy.url().should('include', '/#/calls/edit?return_module=Calls&return_action=DetailView')
    calendar_elements.setIframe().then(() => {
        calendar_elements.task_data().then((data)=>{
        calendar_elements.first_title2().should('have.text', 'Calls')
        calendar_elements.second_title().should('contain.text', 'CREATE')
        cy.task('log', 'Se ha ingresado al formulario. Ingreso de datos de la llamada')
        calendar_elements.start_date2().clear({force: true})
        calendar_elements.duration_hours().clear({force: true})
        calendar_elements.description_field2().type(data.description2, {force: true})
        calendar_elements.save_button2().click({force: true})
        cy.task('log', 'Verificando mensajes de los campos vacios')
        calendar_elements.subject_error_message2()
        .should('contain.text', 'Missing required field: Subject')
        calendar_elements.start_date_error_message()
        .should('contain.text', 'Missing required field: Start Date')
        calendar_elements.duration_hours_error_message()
        .should('contain.text', 'Missing required field: Duration Hours')
    })
    })
}) 

it('TC 303 - Verificar que al dejar los campos obligatorios vacíos el usuario no puede agendar una tarea', { tags: ['smoketest'] }, () => {
    cy.task('log', 'Ingresando al formulario para agendar una llamada')
    calendar_elements.schedule_task_page()
    .click({force: true})
    cy.wait(2000)
    cy.url().should('include', '/#/tasks/edit?return_module=Tasks&return_action=DetailView')
    cy.task('log','Visita al formulario de creacion de tarea')
    calendar_elements.first_title().should('contain.text', 'Create')
    cy.task('log','Se ha ingresado al formulario. Ingreso de datos de la tarea')
    calendar_elements.task_data().then((data)=>{
    calendar_elements.start_date3().type(data.start_date)
    calendar_elements.due_date().type(data.due_date)
    calendar_elements.description_field3().type(data.description0
        
    )
    calendar_elements.contact_field().click()
    calendar_elements.contact_field_search().type(data.contact)
    calendar_elements.contact_field_result().click()
    calendar_elements.save_button3().click()
    cy.task('log','Verificando mensajes de los campos vacios')
    calendar_elements.subject_error_message3().should('contain.text', 'Missing required field: Subject')
    calendar_elements.priority_error_message().should('contain.text', 'Missing required field: Priority')
    })
})

it('TC 304 - Verificar que al presionar un espacio vacío en el calendario y al dejar los campos obligatorios vacíos el usuario no puede agendar una reunión', { tags: ['smoketest'] }, () => {
    cy.task('log','Ingresando a la vista del calendario')
    calendar_elements.calendar_page()
    .click({force: true})
    cy.url().should('include', '/#/calendar')
    calendar_elements.setIframe().then(() => {
        calendar_elements.task_data().then((data)=>{
        calendar_elements.title().should('be.visible').should('have.text', 'Calendar')
        cy.task('log','Se ha ingresado al calendario. Presionar el primer espacio libre del calendario')
        cy.wait(2000)
        calendar_elements.today_free_all_day1().should('be.visible').click({force: true})
        cy.task('log','Ingresando al formulario emergente para agendar una reunion o llamada')
        calendar_elements.meeting_title1().should('be.visible').should('have.text', 'Create Activity')
        cy.task('log','Se ha ingresado al formulario. Ingreso de datos de la reunion')
        calendar_elements.meeting_start_date().clear({force: true})
        calendar_elements.meeting_end_date().clear({force: true})
        calendar_elements.meeting_location_field().type(data.location4, {force: true})
        calendar_elements.meeting_description_field().type(data.description4, {force: true})
        calendar_elements.meeting_save_button().click({force: true})
        cy.task('log','Verificando mensaje de los campos vacios')
        calendar_elements.meeting_subject_error_message().should('contain.text', 'Missing required field: Subject')
        calendar_elements.meeting_start_date_error_message().should('contain.text', 'Missing required field: Start Date')
        calendar_elements.meeting_end_date_error_message().should('contain.text', 'Missing required field: End Date')
    })
    })
}) 

it('FTC 305 - Verificar que al establecer el filtrado de actividades por semana el sistema reordena el calendario mostrando la agenda de los 7 dias de la semana', { tags: ['functional'] }, () => {
    cy.task('log','Ingresando a la vista del calendario')
    calendar_elements.calendar_page()
    .click({force: true})
    cy.url().should('include', '/#/calendar')
    calendar_elements.setIframe().then(() => {
    calendar_elements.title().should('be.visible').should('have.text', 'Calendar')
    cy.task('log','Se ha ingresado al calendario')
    cy.wait(2000)
    cy.task('log','Aplicando filtro de organizacion por dias de la semana')
    calendar_elements.week_filter_button().click({force: true})
    cy.task('log','Verificando el orden de agenda segun el filtro aplicado')
    calendar_elements.days_list().should('have.length', 7)
    })
}) 

it('FTC 306 - Verificar que al modificar la hora de inicio y fin del dia el sistema muestre los dias con la modificacion', { tags: ['functional'] }, () => {
    cy.task('log','Ingresando a la vista del calendario')
    calendar_elements.calendar_page()
    .click({force: true})
    cy.url().should('include', '/#/calendar')
    calendar_elements.setIframe().then(() => {
    calendar_elements.title().should('be.visible').should('have.text', 'Calendar')
    cy.task('log','Se ha ingresado al calendario')
    cy.wait(2000)
    cy.task('log','Ingresando al menu de configuracion del calendario')
    calendar_elements.settings_button().click({force: true})
    calendar_elements.settings_form_title().should('contain.text', 'Settings')
    cy.task('log','Se ha ingresado a la configuracion. Cambiando la hora de inicio y final del dia')
    calendar_elements.settings_form_start_hours().select('12')
    calendar_elements.settings_form_end_hours().select('21')
    calendar_elements.settings_save_button().click({force: true})
    cy.wait(2000)
    cy.task('log','Verificando que la hora de inicio y final del dia se haya cambiado en la vista del calendario')
    calendar_elements.setIframe().then(()=>{
        calendar_elements.start_hour_day().should('contain.text', '12pm')
        calendar_elements.end_hour_day().should('contain.text', '8pm')
    })
    })
})

it('FTC 307 - Verificar que al ingresar al formulario agendar una llamada desde la pagina principal del calendario el sistema muestre el "Log call" como "checked"', () => {
    cy.task('log','Ingresando a la vista del calendario')
    calendar_elements.calendar_page()
    .click({force: true})
    cy.url().should('include', '/#/calendar')
    calendar_elements.setIframe().then(() => {
    calendar_elements.title().should('be.visible').should('have.text', 'Calendar')
    cy.task('log','Se ha ingresado al calendario')
    cy.wait(2000)
    cy.task('log','Presionar el primer espacio libre del calendario')
    calendar_elements.today_free_all_day2().should('be.visible').click({force: true})
    cy.task('log','Ingresando al formulario emergente para agendar una reunion o llamada')
    calendar_elements.meeting_title2().should('be.visible').should('have.text', 'Create Activity')
    cy.task('log','Se ha ingresado al formulario. Ingreso de datos de la reunion')
    cy.task('log','Verificando que el cambio de estado de no tickeado a tickeado de "Log call"')
    calendar_elements.call_form_button().should('not.be.checked')
    calendar_elements.call_form_button().click({force: true})
    calendar_elements.call_form_button().should('be.checked')
    })
    })
})